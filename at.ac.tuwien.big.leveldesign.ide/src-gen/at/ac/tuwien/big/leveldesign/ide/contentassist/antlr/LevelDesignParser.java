/*
 * generated by Xtext 2.10.0
 */
package at.ac.tuwien.big.leveldesign.ide.contentassist.antlr;

import at.ac.tuwien.big.leveldesign.ide.contentassist.antlr.internal.InternalLevelDesignParser;
import at.ac.tuwien.big.leveldesign.services.LevelDesignGrammarAccess;
import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class LevelDesignParser extends AbstractContentAssistParser {

	@Inject
	private LevelDesignGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalLevelDesignParser createParser() {
		InternalLevelDesignParser result = new InternalLevelDesignParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getCoordinateAccess().getAlternatives(), "rule__Coordinate__Alternatives");
					put(grammarAccess.getLevelAccess().getGroup(), "rule__Level__Group__0");
					put(grammarAccess.getRoomAccess().getGroup(), "rule__Room__Group__0");
					put(grammarAccess.getConnectionAccess().getGroup(), "rule__Connection__Group__0");
					put(grammarAccess.getMonsterAccess().getGroup(), "rule__Monster__Group__0");
					put(grammarAccess.getTrapdoorAccess().getGroup(), "rule__Trapdoor__Group__0");
					put(grammarAccess.getWallAccess().getGroup(), "rule__Wall__Group__0");
					put(grammarAccess.getEntryAccess().getGroup(), "rule__Entry__Group__0");
					put(grammarAccess.getExitAccess().getGroup(), "rule__Exit__Group__0");
					put(grammarAccess.getCoordinateAccess().getGroup_0(), "rule__Coordinate__Group_0__0");
					put(grammarAccess.getCoordinateAccess().getGroup_1(), "rule__Coordinate__Group_1__0");
					put(grammarAccess.getLevelAccess().getSpawnRoomAssignment_2(), "rule__Level__SpawnRoomAssignment_2");
					put(grammarAccess.getLevelAccess().getGoalRoomAssignment_5(), "rule__Level__GoalRoomAssignment_5");
					put(grammarAccess.getLevelAccess().getRoomsAssignment_6(), "rule__Level__RoomsAssignment_6");
					put(grammarAccess.getRoomAccess().getNameAssignment_1(), "rule__Room__NameAssignment_1");
					put(grammarAccess.getRoomAccess().getColumnsAssignment_5(), "rule__Room__ColumnsAssignment_5");
					put(grammarAccess.getRoomAccess().getRowsAssignment_8(), "rule__Room__RowsAssignment_8");
					put(grammarAccess.getRoomAccess().getEntryAssignment_9(), "rule__Room__EntryAssignment_9");
					put(grammarAccess.getRoomAccess().getExitAssignment_10(), "rule__Room__ExitAssignment_10");
					put(grammarAccess.getRoomAccess().getExitConnectionAssignment_11(), "rule__Room__ExitConnectionAssignment_11");
					put(grammarAccess.getRoomAccess().getWallsAssignment_12(), "rule__Room__WallsAssignment_12");
					put(grammarAccess.getRoomAccess().getTrapdoorsAssignment_13(), "rule__Room__TrapdoorsAssignment_13");
					put(grammarAccess.getRoomAccess().getMonstersAssignment_14(), "rule__Room__MonstersAssignment_14");
					put(grammarAccess.getConnectionAccess().getTypeAssignment_0(), "rule__Connection__TypeAssignment_0");
					put(grammarAccess.getConnectionAccess().getNextRoomAssignment_2(), "rule__Connection__NextRoomAssignment_2");
					put(grammarAccess.getMonsterAccess().getNameAssignment_1(), "rule__Monster__NameAssignment_1");
					put(grammarAccess.getMonsterAccess().getPositionAssignment_3(), "rule__Monster__PositionAssignment_3");
					put(grammarAccess.getMonsterAccess().getHpAssignment_7(), "rule__Monster__HpAssignment_7");
					put(grammarAccess.getMonsterAccess().getDamageAssignment_10(), "rule__Monster__DamageAssignment_10");
					put(grammarAccess.getMonsterAccess().getSpeedAssignment_13(), "rule__Monster__SpeedAssignment_13");
					put(grammarAccess.getMonsterAccess().getRangeAssignment_16(), "rule__Monster__RangeAssignment_16");
					put(grammarAccess.getMonsterAccess().getAggroRadiusAssignment_19(), "rule__Monster__AggroRadiusAssignment_19");
					put(grammarAccess.getTrapdoorAccess().getNameAssignment_1(), "rule__Trapdoor__NameAssignment_1");
					put(grammarAccess.getTrapdoorAccess().getPositionAssignment_3(), "rule__Trapdoor__PositionAssignment_3");
					put(grammarAccess.getWallAccess().getNameAssignment_1(), "rule__Wall__NameAssignment_1");
					put(grammarAccess.getWallAccess().getFromAssignment_3(), "rule__Wall__FromAssignment_3");
					put(grammarAccess.getWallAccess().getToAssignment_5(), "rule__Wall__ToAssignment_5");
					put(grammarAccess.getEntryAccess().getNameAssignment_1(), "rule__Entry__NameAssignment_1");
					put(grammarAccess.getEntryAccess().getPositionAssignment_3(), "rule__Entry__PositionAssignment_3");
					put(grammarAccess.getExitAccess().getNameAssignment_1(), "rule__Exit__NameAssignment_1");
					put(grammarAccess.getExitAccess().getPositionAssignment_3(), "rule__Exit__PositionAssignment_3");
					put(grammarAccess.getCoordinateAccess().getColumnAssignment_0_1(), "rule__Coordinate__ColumnAssignment_0_1");
					put(grammarAccess.getCoordinateAccess().getRowAssignment_0_3(), "rule__Coordinate__RowAssignment_0_3");
					put(grammarAccess.getCoordinateAccess().getColumnAssignment_1_0(), "rule__Coordinate__ColumnAssignment_1_0");
					put(grammarAccess.getCoordinateAccess().getRowAssignment_1_2(), "rule__Coordinate__RowAssignment_1_2");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalLevelDesignParser typedParser = (InternalLevelDesignParser) parser;
			typedParser.entryRuleLevel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public LevelDesignGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(LevelDesignGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
