/*
 * generated by Xtext 2.10.0
 */
package at.ac.tuwien.big.leveldesign.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class LevelDesignGrammarAccess extends AbstractGrammarElementFinder {
	
	public class LevelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.leveldesign.LevelDesign.Level");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSpawnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSpawnRoomAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSpawnRoomRoomCrossReference_2_0 = (CrossReference)cSpawnRoomAssignment_2.eContents().get(0);
		private final RuleCall cSpawnRoomRoomIDTerminalRuleCall_2_0_1 = (RuleCall)cSpawnRoomRoomCrossReference_2_0.eContents().get(1);
		private final Keyword cGoalKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cGoalRoomAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cGoalRoomRoomCrossReference_5_0 = (CrossReference)cGoalRoomAssignment_5.eContents().get(0);
		private final RuleCall cGoalRoomRoomIDTerminalRuleCall_5_0_1 = (RuleCall)cGoalRoomRoomCrossReference_5_0.eContents().get(1);
		private final Assignment cRoomsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRoomsRoomParserRuleCall_6_0 = (RuleCall)cRoomsAssignment_6.eContents().get(0);
		
		//Level:
		//	'spawn' '=>' spawnRoom=[Room]
		//	'goal' '=>' goalRoom=[Room] rooms+=Room+;
		@Override public ParserRule getRule() { return rule; }
		
		//'spawn' '=>' spawnRoom=[Room] 'goal' '=>' goalRoom=[Room] rooms+=Room+
		public Group getGroup() { return cGroup; }
		
		//'spawn'
		public Keyword getSpawnKeyword_0() { return cSpawnKeyword_0; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_1() { return cEqualsSignGreaterThanSignKeyword_1; }
		
		//spawnRoom=[Room]
		public Assignment getSpawnRoomAssignment_2() { return cSpawnRoomAssignment_2; }
		
		//[Room]
		public CrossReference getSpawnRoomRoomCrossReference_2_0() { return cSpawnRoomRoomCrossReference_2_0; }
		
		//ID
		public RuleCall getSpawnRoomRoomIDTerminalRuleCall_2_0_1() { return cSpawnRoomRoomIDTerminalRuleCall_2_0_1; }
		
		//'goal'
		public Keyword getGoalKeyword_3() { return cGoalKeyword_3; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_4() { return cEqualsSignGreaterThanSignKeyword_4; }
		
		//goalRoom=[Room]
		public Assignment getGoalRoomAssignment_5() { return cGoalRoomAssignment_5; }
		
		//[Room]
		public CrossReference getGoalRoomRoomCrossReference_5_0() { return cGoalRoomRoomCrossReference_5_0; }
		
		//ID
		public RuleCall getGoalRoomRoomIDTerminalRuleCall_5_0_1() { return cGoalRoomRoomIDTerminalRuleCall_5_0_1; }
		
		//rooms+=Room+
		public Assignment getRoomsAssignment_6() { return cRoomsAssignment_6; }
		
		//Room
		public RuleCall getRoomsRoomParserRuleCall_6_0() { return cRoomsRoomParserRuleCall_6_0; }
	}
	public class RoomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.leveldesign.LevelDesign.Room");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRoomKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColumnsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cColumnsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cColumnsINTTerminalRuleCall_5_0 = (RuleCall)cColumnsAssignment_5.eContents().get(0);
		private final Keyword cRowsKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cRowsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cRowsINTTerminalRuleCall_8_0 = (RuleCall)cRowsAssignment_8.eContents().get(0);
		private final Assignment cEntryAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cEntryEntryParserRuleCall_9_0 = (RuleCall)cEntryAssignment_9.eContents().get(0);
		private final Assignment cExitAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cExitExitParserRuleCall_10_0 = (RuleCall)cExitAssignment_10.eContents().get(0);
		private final Assignment cExitConnectionAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cExitConnectionConnectionParserRuleCall_11_0 = (RuleCall)cExitConnectionAssignment_11.eContents().get(0);
		private final Assignment cWallsAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cWallsWallParserRuleCall_12_0 = (RuleCall)cWallsAssignment_12.eContents().get(0);
		private final Assignment cTrapdoorsAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cTrapdoorsTrapdoorParserRuleCall_13_0 = (RuleCall)cTrapdoorsAssignment_13.eContents().get(0);
		private final Assignment cMonstersAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cMonstersMonsterParserRuleCall_14_0 = (RuleCall)cMonstersAssignment_14.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_15 = (Keyword)cGroup.eContents().get(15);
		
		//Room:
		//	'room' name=ID '{'
		//	'columns' '='? columns=INT
		//	'rows' '='? rows=INT
		//	entry=Entry
		//	exit=Exit exitConnection=Connection?
		//	walls+=Wall*
		//	trapdoors+=Trapdoor*
		//	monsters+=Monster*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'room' name=ID '{' 'columns' '='? columns=INT 'rows' '='? rows=INT entry=Entry exit=Exit exitConnection=Connection?
		//walls+=Wall* trapdoors+=Trapdoor* monsters+=Monster* '}'
		public Group getGroup() { return cGroup; }
		
		//'room'
		public Keyword getRoomKeyword_0() { return cRoomKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'columns'
		public Keyword getColumnsKeyword_3() { return cColumnsKeyword_3; }
		
		//'='?
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//columns=INT
		public Assignment getColumnsAssignment_5() { return cColumnsAssignment_5; }
		
		//INT
		public RuleCall getColumnsINTTerminalRuleCall_5_0() { return cColumnsINTTerminalRuleCall_5_0; }
		
		//'rows'
		public Keyword getRowsKeyword_6() { return cRowsKeyword_6; }
		
		//'='?
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }
		
		//rows=INT
		public Assignment getRowsAssignment_8() { return cRowsAssignment_8; }
		
		//INT
		public RuleCall getRowsINTTerminalRuleCall_8_0() { return cRowsINTTerminalRuleCall_8_0; }
		
		//entry=Entry
		public Assignment getEntryAssignment_9() { return cEntryAssignment_9; }
		
		//Entry
		public RuleCall getEntryEntryParserRuleCall_9_0() { return cEntryEntryParserRuleCall_9_0; }
		
		//exit=Exit
		public Assignment getExitAssignment_10() { return cExitAssignment_10; }
		
		//Exit
		public RuleCall getExitExitParserRuleCall_10_0() { return cExitExitParserRuleCall_10_0; }
		
		//exitConnection=Connection?
		public Assignment getExitConnectionAssignment_11() { return cExitConnectionAssignment_11; }
		
		//Connection
		public RuleCall getExitConnectionConnectionParserRuleCall_11_0() { return cExitConnectionConnectionParserRuleCall_11_0; }
		
		//walls+=Wall*
		public Assignment getWallsAssignment_12() { return cWallsAssignment_12; }
		
		//Wall
		public RuleCall getWallsWallParserRuleCall_12_0() { return cWallsWallParserRuleCall_12_0; }
		
		//trapdoors+=Trapdoor*
		public Assignment getTrapdoorsAssignment_13() { return cTrapdoorsAssignment_13; }
		
		//Trapdoor
		public RuleCall getTrapdoorsTrapdoorParserRuleCall_13_0() { return cTrapdoorsTrapdoorParserRuleCall_13_0; }
		
		//monsters+=Monster*
		public Assignment getMonstersAssignment_14() { return cMonstersAssignment_14; }
		
		//Monster
		public RuleCall getMonstersMonsterParserRuleCall_14_0() { return cMonstersMonsterParserRuleCall_14_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_15() { return cRightCurlyBracketKeyword_15; }
	}
	public class ConnectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.leveldesign.LevelDesign.Connection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeSTRINGTerminalRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNextRoomAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cNextRoomRoomCrossReference_2_0 = (CrossReference)cNextRoomAssignment_2.eContents().get(0);
		private final RuleCall cNextRoomRoomIDTerminalRuleCall_2_0_1 = (RuleCall)cNextRoomRoomCrossReference_2_0.eContents().get(1);
		
		//Connection:
		//	type=STRING '=>' nextRoom=[Room];
		@Override public ParserRule getRule() { return rule; }
		
		//type=STRING '=>' nextRoom=[Room]
		public Group getGroup() { return cGroup; }
		
		//type=STRING
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//STRING
		public RuleCall getTypeSTRINGTerminalRuleCall_0_0() { return cTypeSTRINGTerminalRuleCall_0_0; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_1() { return cEqualsSignGreaterThanSignKeyword_1; }
		
		//nextRoom=[Room]
		public Assignment getNextRoomAssignment_2() { return cNextRoomAssignment_2; }
		
		//[Room]
		public CrossReference getNextRoomRoomCrossReference_2_0() { return cNextRoomRoomCrossReference_2_0; }
		
		//ID
		public RuleCall getNextRoomRoomIDTerminalRuleCall_2_0_1() { return cNextRoomRoomIDTerminalRuleCall_2_0_1; }
	}
	public class MonsterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.leveldesign.LevelDesign.Monster");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMonsterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cCommercialAtKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPositionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPositionCoordinateParserRuleCall_3_0 = (RuleCall)cPositionAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cHpKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cHpAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cHpINTTerminalRuleCall_7_0 = (RuleCall)cHpAssignment_7.eContents().get(0);
		private final Keyword cDamageKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cEqualsSignKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cDamageAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cDamageINTTerminalRuleCall_10_0 = (RuleCall)cDamageAssignment_10.eContents().get(0);
		private final Keyword cSpeedKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cEqualsSignKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cSpeedAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cSpeedDOUBLETerminalRuleCall_13_0 = (RuleCall)cSpeedAssignment_13.eContents().get(0);
		private final Keyword cRangeKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Keyword cEqualsSignKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Assignment cRangeAssignment_16 = (Assignment)cGroup.eContents().get(16);
		private final RuleCall cRangeINTTerminalRuleCall_16_0 = (RuleCall)cRangeAssignment_16.eContents().get(0);
		private final Keyword cAggroradiusKeyword_17 = (Keyword)cGroup.eContents().get(17);
		private final Keyword cEqualsSignKeyword_18 = (Keyword)cGroup.eContents().get(18);
		private final Assignment cAggroRadiusAssignment_19 = (Assignment)cGroup.eContents().get(19);
		private final RuleCall cAggroRadiusINTTerminalRuleCall_19_0 = (RuleCall)cAggroRadiusAssignment_19.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_20 = (Keyword)cGroup.eContents().get(20);
		
		//Monster:
		//	'monster' name=ID? '@'? position=Coordinate '{'
		//	'hp' '='? hp=INT
		//	'damage' '='? damage=INT
		//	'speed' '='? speed=DOUBLE
		//	'range' '='? range=INT
		//	'aggroradius' '='? aggroRadius=INT
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'monster' name=ID? '@'? position=Coordinate '{' 'hp' '='? hp=INT 'damage' '='? damage=INT 'speed' '='? speed=DOUBLE
		//'range' '='? range=INT 'aggroradius' '='? aggroRadius=INT '}'
		public Group getGroup() { return cGroup; }
		
		//'monster'
		public Keyword getMonsterKeyword_0() { return cMonsterKeyword_0; }
		
		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'@'?
		public Keyword getCommercialAtKeyword_2() { return cCommercialAtKeyword_2; }
		
		//position=Coordinate
		public Assignment getPositionAssignment_3() { return cPositionAssignment_3; }
		
		//Coordinate
		public RuleCall getPositionCoordinateParserRuleCall_3_0() { return cPositionCoordinateParserRuleCall_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//'hp'
		public Keyword getHpKeyword_5() { return cHpKeyword_5; }
		
		//'='?
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//hp=INT
		public Assignment getHpAssignment_7() { return cHpAssignment_7; }
		
		//INT
		public RuleCall getHpINTTerminalRuleCall_7_0() { return cHpINTTerminalRuleCall_7_0; }
		
		//'damage'
		public Keyword getDamageKeyword_8() { return cDamageKeyword_8; }
		
		//'='?
		public Keyword getEqualsSignKeyword_9() { return cEqualsSignKeyword_9; }
		
		//damage=INT
		public Assignment getDamageAssignment_10() { return cDamageAssignment_10; }
		
		//INT
		public RuleCall getDamageINTTerminalRuleCall_10_0() { return cDamageINTTerminalRuleCall_10_0; }
		
		//'speed'
		public Keyword getSpeedKeyword_11() { return cSpeedKeyword_11; }
		
		//'='?
		public Keyword getEqualsSignKeyword_12() { return cEqualsSignKeyword_12; }
		
		//speed=DOUBLE
		public Assignment getSpeedAssignment_13() { return cSpeedAssignment_13; }
		
		//DOUBLE
		public RuleCall getSpeedDOUBLETerminalRuleCall_13_0() { return cSpeedDOUBLETerminalRuleCall_13_0; }
		
		//'range'
		public Keyword getRangeKeyword_14() { return cRangeKeyword_14; }
		
		//'='?
		public Keyword getEqualsSignKeyword_15() { return cEqualsSignKeyword_15; }
		
		//range=INT
		public Assignment getRangeAssignment_16() { return cRangeAssignment_16; }
		
		//INT
		public RuleCall getRangeINTTerminalRuleCall_16_0() { return cRangeINTTerminalRuleCall_16_0; }
		
		//'aggroradius'
		public Keyword getAggroradiusKeyword_17() { return cAggroradiusKeyword_17; }
		
		//'='?
		public Keyword getEqualsSignKeyword_18() { return cEqualsSignKeyword_18; }
		
		//aggroRadius=INT
		public Assignment getAggroRadiusAssignment_19() { return cAggroRadiusAssignment_19; }
		
		//INT
		public RuleCall getAggroRadiusINTTerminalRuleCall_19_0() { return cAggroRadiusINTTerminalRuleCall_19_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_20() { return cRightCurlyBracketKeyword_20; }
	}
	public class TrapdoorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.leveldesign.LevelDesign.Trapdoor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTrapdoorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cCommercialAtKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPositionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPositionCoordinateParserRuleCall_3_0 = (RuleCall)cPositionAssignment_3.eContents().get(0);
		
		//Trapdoor:
		//	'trapdoor' name=ID? '@'? position=Coordinate;
		@Override public ParserRule getRule() { return rule; }
		
		//'trapdoor' name=ID? '@'? position=Coordinate
		public Group getGroup() { return cGroup; }
		
		//'trapdoor'
		public Keyword getTrapdoorKeyword_0() { return cTrapdoorKeyword_0; }
		
		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'@'?
		public Keyword getCommercialAtKeyword_2() { return cCommercialAtKeyword_2; }
		
		//position=Coordinate
		public Assignment getPositionAssignment_3() { return cPositionAssignment_3; }
		
		//Coordinate
		public RuleCall getPositionCoordinateParserRuleCall_3_0() { return cPositionCoordinateParserRuleCall_3_0; }
	}
	public class WallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.leveldesign.LevelDesign.Wall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWallKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFromAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFromCoordinateParserRuleCall_3_0 = (RuleCall)cFromAssignment_3.eContents().get(0);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cToAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cToCoordinateParserRuleCall_5_0 = (RuleCall)cToAssignment_5.eContents().get(0);
		
		//Wall:
		//	'wall' name=ID 'from' from=Coordinate 'to' to=Coordinate;
		@Override public ParserRule getRule() { return rule; }
		
		//'wall' name=ID 'from' from=Coordinate 'to' to=Coordinate
		public Group getGroup() { return cGroup; }
		
		//'wall'
		public Keyword getWallKeyword_0() { return cWallKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'from'
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }
		
		//from=Coordinate
		public Assignment getFromAssignment_3() { return cFromAssignment_3; }
		
		//Coordinate
		public RuleCall getFromCoordinateParserRuleCall_3_0() { return cFromCoordinateParserRuleCall_3_0; }
		
		//'to'
		public Keyword getToKeyword_4() { return cToKeyword_4; }
		
		//to=Coordinate
		public Assignment getToAssignment_5() { return cToAssignment_5; }
		
		//Coordinate
		public RuleCall getToCoordinateParserRuleCall_5_0() { return cToCoordinateParserRuleCall_5_0; }
	}
	public class EntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.leveldesign.LevelDesign.Entry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cCommercialAtKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPositionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPositionCoordinateParserRuleCall_3_0 = (RuleCall)cPositionAssignment_3.eContents().get(0);
		
		//Entry:
		//	'entry' name=ID '@'? position=Coordinate;
		@Override public ParserRule getRule() { return rule; }
		
		//'entry' name=ID '@'? position=Coordinate
		public Group getGroup() { return cGroup; }
		
		//'entry'
		public Keyword getEntryKeyword_0() { return cEntryKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'@'?
		public Keyword getCommercialAtKeyword_2() { return cCommercialAtKeyword_2; }
		
		//position=Coordinate
		public Assignment getPositionAssignment_3() { return cPositionAssignment_3; }
		
		//Coordinate
		public RuleCall getPositionCoordinateParserRuleCall_3_0() { return cPositionCoordinateParserRuleCall_3_0; }
	}
	public class ExitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.leveldesign.LevelDesign.Exit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cCommercialAtKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPositionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPositionCoordinateParserRuleCall_3_0 = (RuleCall)cPositionAssignment_3.eContents().get(0);
		
		//Exit:
		//	'exit' name=ID '@'? position=Coordinate;
		@Override public ParserRule getRule() { return rule; }
		
		//'exit' name=ID '@'? position=Coordinate
		public Group getGroup() { return cGroup; }
		
		//'exit'
		public Keyword getExitKeyword_0() { return cExitKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'@'?
		public Keyword getCommercialAtKeyword_2() { return cCommercialAtKeyword_2; }
		
		//position=Coordinate
		public Assignment getPositionAssignment_3() { return cPositionAssignment_3; }
		
		//Coordinate
		public RuleCall getPositionCoordinateParserRuleCall_3_0() { return cPositionCoordinateParserRuleCall_3_0; }
	}
	public class CoordinateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.leveldesign.LevelDesign.Coordinate");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cColumnAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cColumnINTTerminalRuleCall_0_1_0 = (RuleCall)cColumnAssignment_0_1.eContents().get(0);
		private final Keyword cCommaKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cRowAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cRowINTTerminalRuleCall_0_3_0 = (RuleCall)cRowAssignment_0_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cColumnAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cColumnINTTerminalRuleCall_1_0_0 = (RuleCall)cColumnAssignment_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRowAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRowINTTerminalRuleCall_1_2_0 = (RuleCall)cRowAssignment_1_2.eContents().get(0);
		
		//Coordinate:
		//	'(' column=INT ',' row=INT ')' | column=INT ',' row=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' column=INT ',' row=INT ')' | column=INT ',' row=INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' column=INT ',' row=INT ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//column=INT
		public Assignment getColumnAssignment_0_1() { return cColumnAssignment_0_1; }
		
		//INT
		public RuleCall getColumnINTTerminalRuleCall_0_1_0() { return cColumnINTTerminalRuleCall_0_1_0; }
		
		//','
		public Keyword getCommaKeyword_0_2() { return cCommaKeyword_0_2; }
		
		//row=INT
		public Assignment getRowAssignment_0_3() { return cRowAssignment_0_3; }
		
		//INT
		public RuleCall getRowINTTerminalRuleCall_0_3_0() { return cRowINTTerminalRuleCall_0_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }
		
		//column=INT ',' row=INT
		public Group getGroup_1() { return cGroup_1; }
		
		//column=INT
		public Assignment getColumnAssignment_1_0() { return cColumnAssignment_1_0; }
		
		//INT
		public RuleCall getColumnINTTerminalRuleCall_1_0_0() { return cColumnINTTerminalRuleCall_1_0_0; }
		
		//','
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }
		
		//row=INT
		public Assignment getRowAssignment_1_2() { return cRowAssignment_1_2; }
		
		//INT
		public RuleCall getRowINTTerminalRuleCall_1_2_0() { return cRowINTTerminalRuleCall_1_2_0; }
	}
	
	
	private final LevelElements pLevel;
	private final RoomElements pRoom;
	private final ConnectionElements pConnection;
	private final MonsterElements pMonster;
	private final TrapdoorElements pTrapdoor;
	private final WallElements pWall;
	private final EntryElements pEntry;
	private final ExitElements pExit;
	private final CoordinateElements pCoordinate;
	private final TerminalRule tDOUBLE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public LevelDesignGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pLevel = new LevelElements();
		this.pRoom = new RoomElements();
		this.pConnection = new ConnectionElements();
		this.pMonster = new MonsterElements();
		this.pTrapdoor = new TrapdoorElements();
		this.pWall = new WallElements();
		this.pEntry = new EntryElements();
		this.pExit = new ExitElements();
		this.pCoordinate = new CoordinateElements();
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.leveldesign.LevelDesign.DOUBLE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("at.ac.tuwien.big.leveldesign.LevelDesign".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Level:
	//	'spawn' '=>' spawnRoom=[Room]
	//	'goal' '=>' goalRoom=[Room] rooms+=Room+;
	public LevelElements getLevelAccess() {
		return pLevel;
	}
	
	public ParserRule getLevelRule() {
		return getLevelAccess().getRule();
	}
	
	//Room:
	//	'room' name=ID '{'
	//	'columns' '='? columns=INT
	//	'rows' '='? rows=INT
	//	entry=Entry
	//	exit=Exit exitConnection=Connection?
	//	walls+=Wall*
	//	trapdoors+=Trapdoor*
	//	monsters+=Monster*
	//	'}';
	public RoomElements getRoomAccess() {
		return pRoom;
	}
	
	public ParserRule getRoomRule() {
		return getRoomAccess().getRule();
	}
	
	//Connection:
	//	type=STRING '=>' nextRoom=[Room];
	public ConnectionElements getConnectionAccess() {
		return pConnection;
	}
	
	public ParserRule getConnectionRule() {
		return getConnectionAccess().getRule();
	}
	
	//Monster:
	//	'monster' name=ID? '@'? position=Coordinate '{'
	//	'hp' '='? hp=INT
	//	'damage' '='? damage=INT
	//	'speed' '='? speed=DOUBLE
	//	'range' '='? range=INT
	//	'aggroradius' '='? aggroRadius=INT
	//	'}';
	public MonsterElements getMonsterAccess() {
		return pMonster;
	}
	
	public ParserRule getMonsterRule() {
		return getMonsterAccess().getRule();
	}
	
	//Trapdoor:
	//	'trapdoor' name=ID? '@'? position=Coordinate;
	public TrapdoorElements getTrapdoorAccess() {
		return pTrapdoor;
	}
	
	public ParserRule getTrapdoorRule() {
		return getTrapdoorAccess().getRule();
	}
	
	//Wall:
	//	'wall' name=ID 'from' from=Coordinate 'to' to=Coordinate;
	public WallElements getWallAccess() {
		return pWall;
	}
	
	public ParserRule getWallRule() {
		return getWallAccess().getRule();
	}
	
	//Entry:
	//	'entry' name=ID '@'? position=Coordinate;
	public EntryElements getEntryAccess() {
		return pEntry;
	}
	
	public ParserRule getEntryRule() {
		return getEntryAccess().getRule();
	}
	
	//Exit:
	//	'exit' name=ID '@'? position=Coordinate;
	public ExitElements getExitAccess() {
		return pExit;
	}
	
	public ParserRule getExitRule() {
		return getExitAccess().getRule();
	}
	
	//Coordinate:
	//	'(' column=INT ',' row=INT ')' | column=INT ',' row=INT;
	public CoordinateElements getCoordinateAccess() {
		return pCoordinate;
	}
	
	public ParserRule getCoordinateRule() {
		return getCoordinateAccess().getRule();
	}
	
	//terminal DOUBLE returns ecore::EDouble:
	//	INT '.' INT;
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
