/**
 * generated by Xtext 2.10.0
 */
package at.ac.tuwien.big.leveldesign.levelDesign.impl;

import at.ac.tuwien.big.leveldesign.levelDesign.Level;
import at.ac.tuwien.big.leveldesign.levelDesign.LevelDesignPackage;
import at.ac.tuwien.big.leveldesign.levelDesign.Room;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Level</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link at.ac.tuwien.big.leveldesign.levelDesign.impl.LevelImpl#getSpawnRoom <em>Spawn Room</em>}</li>
 *   <li>{@link at.ac.tuwien.big.leveldesign.levelDesign.impl.LevelImpl#getGoalRoom <em>Goal Room</em>}</li>
 *   <li>{@link at.ac.tuwien.big.leveldesign.levelDesign.impl.LevelImpl#getRooms <em>Rooms</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LevelImpl extends MinimalEObjectImpl.Container implements Level
{
  /**
   * The cached value of the '{@link #getSpawnRoom() <em>Spawn Room</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSpawnRoom()
   * @generated
   * @ordered
   */
  protected Room spawnRoom;

  /**
   * The cached value of the '{@link #getGoalRoom() <em>Goal Room</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGoalRoom()
   * @generated
   * @ordered
   */
  protected Room goalRoom;

  /**
   * The cached value of the '{@link #getRooms() <em>Rooms</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRooms()
   * @generated
   * @ordered
   */
  protected EList<Room> rooms;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LevelImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LevelDesignPackage.Literals.LEVEL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Room getSpawnRoom()
  {
    if (spawnRoom != null && spawnRoom.eIsProxy())
    {
      InternalEObject oldSpawnRoom = (InternalEObject)spawnRoom;
      spawnRoom = (Room)eResolveProxy(oldSpawnRoom);
      if (spawnRoom != oldSpawnRoom)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, LevelDesignPackage.LEVEL__SPAWN_ROOM, oldSpawnRoom, spawnRoom));
      }
    }
    return spawnRoom;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Room basicGetSpawnRoom()
  {
    return spawnRoom;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSpawnRoom(Room newSpawnRoom)
  {
    Room oldSpawnRoom = spawnRoom;
    spawnRoom = newSpawnRoom;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LevelDesignPackage.LEVEL__SPAWN_ROOM, oldSpawnRoom, spawnRoom));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Room getGoalRoom()
  {
    if (goalRoom != null && goalRoom.eIsProxy())
    {
      InternalEObject oldGoalRoom = (InternalEObject)goalRoom;
      goalRoom = (Room)eResolveProxy(oldGoalRoom);
      if (goalRoom != oldGoalRoom)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, LevelDesignPackage.LEVEL__GOAL_ROOM, oldGoalRoom, goalRoom));
      }
    }
    return goalRoom;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Room basicGetGoalRoom()
  {
    return goalRoom;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setGoalRoom(Room newGoalRoom)
  {
    Room oldGoalRoom = goalRoom;
    goalRoom = newGoalRoom;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LevelDesignPackage.LEVEL__GOAL_ROOM, oldGoalRoom, goalRoom));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Room> getRooms()
  {
    if (rooms == null)
    {
      rooms = new EObjectContainmentEList<Room>(Room.class, this, LevelDesignPackage.LEVEL__ROOMS);
    }
    return rooms;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LevelDesignPackage.LEVEL__ROOMS:
        return ((InternalEList<?>)getRooms()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LevelDesignPackage.LEVEL__SPAWN_ROOM:
        if (resolve) return getSpawnRoom();
        return basicGetSpawnRoom();
      case LevelDesignPackage.LEVEL__GOAL_ROOM:
        if (resolve) return getGoalRoom();
        return basicGetGoalRoom();
      case LevelDesignPackage.LEVEL__ROOMS:
        return getRooms();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LevelDesignPackage.LEVEL__SPAWN_ROOM:
        setSpawnRoom((Room)newValue);
        return;
      case LevelDesignPackage.LEVEL__GOAL_ROOM:
        setGoalRoom((Room)newValue);
        return;
      case LevelDesignPackage.LEVEL__ROOMS:
        getRooms().clear();
        getRooms().addAll((Collection<? extends Room>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LevelDesignPackage.LEVEL__SPAWN_ROOM:
        setSpawnRoom((Room)null);
        return;
      case LevelDesignPackage.LEVEL__GOAL_ROOM:
        setGoalRoom((Room)null);
        return;
      case LevelDesignPackage.LEVEL__ROOMS:
        getRooms().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LevelDesignPackage.LEVEL__SPAWN_ROOM:
        return spawnRoom != null;
      case LevelDesignPackage.LEVEL__GOAL_ROOM:
        return goalRoom != null;
      case LevelDesignPackage.LEVEL__ROOMS:
        return rooms != null && !rooms.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //LevelImpl
