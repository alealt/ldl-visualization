/*
 * generated by Xtext 2.10.0
 */
package at.ac.tuwien.big.leveldesign.serializer;

import at.ac.tuwien.big.leveldesign.services.LevelDesignGrammarAccess;
import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class LevelDesignSyntacticSequencer extends AbstractSyntacticSequencer {

	protected LevelDesignGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Entry_CommercialAtKeyword_2_q;
	protected AbstractElementAlias match_Exit_CommercialAtKeyword_2_q;
	protected AbstractElementAlias match_Monster_CommercialAtKeyword_2_q;
	protected AbstractElementAlias match_Monster_EqualsSignKeyword_12_q;
	protected AbstractElementAlias match_Monster_EqualsSignKeyword_15_q;
	protected AbstractElementAlias match_Monster_EqualsSignKeyword_18_q;
	protected AbstractElementAlias match_Monster_EqualsSignKeyword_6_q;
	protected AbstractElementAlias match_Monster_EqualsSignKeyword_9_q;
	protected AbstractElementAlias match_Room_EqualsSignKeyword_4_q;
	protected AbstractElementAlias match_Room_EqualsSignKeyword_7_q;
	protected AbstractElementAlias match_Trapdoor_CommercialAtKeyword_2_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (LevelDesignGrammarAccess) access;
		match_Entry_CommercialAtKeyword_2_q = new TokenAlias(false, true, grammarAccess.getEntryAccess().getCommercialAtKeyword_2());
		match_Exit_CommercialAtKeyword_2_q = new TokenAlias(false, true, grammarAccess.getExitAccess().getCommercialAtKeyword_2());
		match_Monster_CommercialAtKeyword_2_q = new TokenAlias(false, true, grammarAccess.getMonsterAccess().getCommercialAtKeyword_2());
		match_Monster_EqualsSignKeyword_12_q = new TokenAlias(false, true, grammarAccess.getMonsterAccess().getEqualsSignKeyword_12());
		match_Monster_EqualsSignKeyword_15_q = new TokenAlias(false, true, grammarAccess.getMonsterAccess().getEqualsSignKeyword_15());
		match_Monster_EqualsSignKeyword_18_q = new TokenAlias(false, true, grammarAccess.getMonsterAccess().getEqualsSignKeyword_18());
		match_Monster_EqualsSignKeyword_6_q = new TokenAlias(false, true, grammarAccess.getMonsterAccess().getEqualsSignKeyword_6());
		match_Monster_EqualsSignKeyword_9_q = new TokenAlias(false, true, grammarAccess.getMonsterAccess().getEqualsSignKeyword_9());
		match_Room_EqualsSignKeyword_4_q = new TokenAlias(false, true, grammarAccess.getRoomAccess().getEqualsSignKeyword_4());
		match_Room_EqualsSignKeyword_7_q = new TokenAlias(false, true, grammarAccess.getRoomAccess().getEqualsSignKeyword_7());
		match_Trapdoor_CommercialAtKeyword_2_q = new TokenAlias(false, true, grammarAccess.getTrapdoorAccess().getCommercialAtKeyword_2());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Entry_CommercialAtKeyword_2_q.equals(syntax))
				emit_Entry_CommercialAtKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Exit_CommercialAtKeyword_2_q.equals(syntax))
				emit_Exit_CommercialAtKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Monster_CommercialAtKeyword_2_q.equals(syntax))
				emit_Monster_CommercialAtKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Monster_EqualsSignKeyword_12_q.equals(syntax))
				emit_Monster_EqualsSignKeyword_12_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Monster_EqualsSignKeyword_15_q.equals(syntax))
				emit_Monster_EqualsSignKeyword_15_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Monster_EqualsSignKeyword_18_q.equals(syntax))
				emit_Monster_EqualsSignKeyword_18_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Monster_EqualsSignKeyword_6_q.equals(syntax))
				emit_Monster_EqualsSignKeyword_6_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Monster_EqualsSignKeyword_9_q.equals(syntax))
				emit_Monster_EqualsSignKeyword_9_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Room_EqualsSignKeyword_4_q.equals(syntax))
				emit_Room_EqualsSignKeyword_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Room_EqualsSignKeyword_7_q.equals(syntax))
				emit_Room_EqualsSignKeyword_7_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Trapdoor_CommercialAtKeyword_2_q.equals(syntax))
				emit_Trapdoor_CommercialAtKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '@'?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) position=Coordinate
	 */
	protected void emit_Entry_CommercialAtKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '@'?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) position=Coordinate
	 */
	protected void emit_Exit_CommercialAtKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '@'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'monster' (ambiguity) position=Coordinate
	 *     name=ID (ambiguity) position=Coordinate
	 */
	protected void emit_Monster_CommercialAtKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '='?
	 *
	 * This ambiguous syntax occurs at:
	 *     damage=INT 'speed' (ambiguity) speed=DOUBLE
	 */
	protected void emit_Monster_EqualsSignKeyword_12_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '='?
	 *
	 * This ambiguous syntax occurs at:
	 *     speed=DOUBLE 'range' (ambiguity) range=INT
	 */
	protected void emit_Monster_EqualsSignKeyword_15_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '='?
	 *
	 * This ambiguous syntax occurs at:
	 *     range=INT 'aggroradius' (ambiguity) aggroRadius=INT
	 */
	protected void emit_Monster_EqualsSignKeyword_18_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '='?
	 *
	 * This ambiguous syntax occurs at:
	 *     position=Coordinate '{' 'hp' (ambiguity) hp=INT
	 */
	protected void emit_Monster_EqualsSignKeyword_6_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '='?
	 *
	 * This ambiguous syntax occurs at:
	 *     hp=INT 'damage' (ambiguity) damage=INT
	 */
	protected void emit_Monster_EqualsSignKeyword_9_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '='?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID '{' 'columns' (ambiguity) columns=INT
	 */
	protected void emit_Room_EqualsSignKeyword_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '='?
	 *
	 * This ambiguous syntax occurs at:
	 *     columns=INT 'rows' (ambiguity) rows=INT
	 */
	protected void emit_Room_EqualsSignKeyword_7_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '@'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'trapdoor' (ambiguity) position=Coordinate
	 *     name=ID (ambiguity) position=Coordinate
	 */
	protected void emit_Trapdoor_CommercialAtKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
