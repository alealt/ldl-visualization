package at.ac.tuwien.big.leveldesign.ui.nodes;

import at.ac.tuwien.big.leveldesign.levelDesign.Room;
import at.ac.tuwien.big.leveldesign.ui.domainconverter.Domain2ViewModelConverter;
import at.ac.tuwien.big.leveldesign.ui.model.RoomView;
import at.ac.tuwien.big.leveldesign.ui.threeD.Room3DInterpretation;
import at.ac.tuwien.big.leveldesign.ui.threeD.Room3DReconcileBehavior;
import de.fxdiagram.annotations.properties.ModelNode;
import de.fxdiagram.core.model.ModelElementImpl;
import de.fxdiagram.core.model.ToString;
import de.fxdiagram.mapping.IMappedElementDescriptor;
import de.fxdiagram.mapping.shapes.BaseNode;
import javafx.beans.property.ObjectProperty;
import javafx.collections.ObservableList;
import javafx.scene.Node;
import javafx.scene.SubScene;
import org.eclipse.xtext.xbase.lib.Functions.Function1;

@ModelNode
@SuppressWarnings("all")
public class Room3DNode extends BaseNode<Room> {
  public Room3DNode(final IMappedElementDescriptor<Room> descriptor) {
    super(descriptor);
  }
  
  @Override
  public void doActivate() {
    super.doActivate();
    Room3DReconcileBehavior<Object> _room3DReconcileBehavior = new Room3DReconcileBehavior<Object>(this);
    this.addBehavior(_room3DReconcileBehavior);
  }
  
  @Override
  protected Node createNode() {
    SubScene _xblockexpression = null;
    {
      Room3DInterpretation app = new Room3DInterpretation();
      IMappedElementDescriptor<Room> _domainObjectDescriptor = this.getDomainObjectDescriptor();
      final Function1<Room, Room> _function = (Room it) -> {
        return it;
      };
      Room _withDomainObject = _domainObjectDescriptor.<Room>withDomainObject(_function);
      RoomView _room = Domain2ViewModelConverter.room(_withDomainObject);
      app.initialize(_room);
      _xblockexpression = app.getSubscene();
    }
    return _xblockexpression;
  }
  
  public boolean updateNode() {
    boolean _xblockexpression = false;
    {
      Node node = this.createNode();
      ObservableList<Node> _children = this.getChildren();
      _children.clear();
      ObjectProperty<Node> _nodeProperty = this.nodeProperty();
      _nodeProperty.set(node);
      _xblockexpression = this.addNodeAsChild(node);
    }
    return _xblockexpression;
  }
  
  /**
   * Automatically generated by @ModelNode. Needed for deserialization.
   */
  public Room3DNode() {
  }
  
  public void populate(final ModelElementImpl modelElement) {
    super.populate(modelElement);
  }
  
  public String toString() {
    return ToString.toString(this);
  }
}
